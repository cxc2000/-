module lift_stu( input clk,
input [9:0] btn, input btn1,
output [9:0] nfloor,

output [10:0] seg,

output [10:0] seg1, output reg lift_open
);

parameter N=99_999999;

reg [9:0] btn_pre_re,btn_buff,btn_off,btn_test; reg btn1_pre_re,btn1_off;
reg clk_200ms; reg clk_1s; reg clk_3s;
reg [31:0] count,count1,count3;

reg [1:0] cou1,cou2,cou3,cou4,cou5,cou6,cou7;

reg [10:0] dout,dout1;

reg [1:0] lift_state;

reg [4:0] lift_num,clk_num; initial begin
btn_off<=9'b111111111; btn1_off<=1'b1; btn_pre_re<=0;







end

lift_num<=3; lift_state<=0; lift_open<=0;


always@(posedge clk)begin	//分频一个 200ms 的时钟，用于按

键防抖


clk_200ms<=0; if(count<N/5)
count<=count+1; else begin
count<=0; clk_200ms<=1;

end end
always@(posedge clk)begin	//分频一个 1s 的时钟，用于电梯
运行时钟控制
clk_1s<=0; if(count1<N)
count1<=count1+1; else begin
count1<=0; clk_1s<=1;
end end
always@(posedge clk_200ms)begin btn_pre_re=btn_pre_re^btn;


btn_pre_re=btn_pre_re&btn_off;//创新设计：异或门用于
按两次按键时进行取消的操作
btn1_pre_re=btn1_pre_re^btn1;//复位按键








end

btn1_pre_re=btn1_pre_re&btn1_off; if(btn1_pre_re==1)
begin btn_pre_re<=9'b000000010; btn1_pre_re=0;
end


always@(posedge clk_1s)begin
btn_buff=btn_pre_re;//btn_pre_re 寄存按键信息
case(lift_state) 0:begin
if((btn_buff>>lift_num)>0)begin
if(cou1<3)//网上没有的方法，类似 C 语言的思想，实现 3s 的延时，后面有类似代码
begin cou1=cou1+1;
end if(cou1==3)
begin lift_num=lift_num+1; clk_num=clk_num+1;
lift_state=1;//上层有人叫电梯

cou1=0; end
end







本层有人叫电梯

if((btn_buff&(1<<(lift_num-1)))>0)begin btn_buff=btn_buff&(~(1<<(lift_num-1)));//

btn_off=~(1<<(lift_num-1)); lift_open=1;
if(cou2<3) begin cou2=cou2+1;
end if(cou2==3)
begin clk_num=0; lift_open=0; lift_state=0; cou2=0;
end end

if((1<<(lift_num-1))>btn_buff)begin//下层有

人叫电梯


if(btn_buff>0)begin if(cou3<3)






















end

begin cou3=cou3+1;
end if(cou3==3)
begin

lift_num=lift_num-1; clk_num=clk_num+1; lift_state=2; cou3=0;
end end
end




1:begin

if((btn_buff>>lift_num)>0)begin if((btn_buff&(1<<(lift_num-1)))>0)begin

btn_buff=btn_buff&(~(1<<(lift_num-1)));

btn_off=~(1<<(lift_num-1)); lift_open=1;
if(cou4<3) begin cou4=cou4+1;
end if(cou4==3)
begin












end

clk_num=0; lift_open=0; lift_num=lift_num+1; clk_num=clk_num+1; cou4=0;
end


else

lift_num=lift_num+1; clk_num=clk_num+1;
end

else begin


btn_buff=btn_buff&(~(1<<(lift_num-1)));

btn_off=~(1<<(lift_num-1)); lift_open=1;
if(cou5<3) begin cou5=cou5+1;
end if(cou5==3)
begin

clk_num=0; lift_open=0; lift_state=0; cou5=0;
end

end

end



2:begin

btn_test=(btn_buff<<(10-lift_num)); if(btn_test>0)begin
if((btn_buff&(1<<(lift_num-1)))>0)begin//
解决下楼命令的其中一个

btn_buff=btn_buff&(~(1<<(lift_num-1)));

btn_off=~(1<<(lift_num-1)); lift_open=1;
if(cou6<3) begin cou6=cou6+1;
end if(cou6==3)
begin

clk_num=0; lift_open=0; lift_num=lift_num-1; clk_num=clk_num+1; cou6=0;
end

end else
lift_num=lift_num-1;

clk_num=clk_num+1;

end

else begin//解决下楼命令的最后一个

btn_buff=btn_buff&(~(1<<(lift_num-1)));

btn_off=~(1<<(lift_num-1)); lift_open=1;
if(cou7<3) begin cou7=cou7+1;
end if(cou7==3)
begin

clk_num=0; lift_open=0; lift_state=0; cou7=0;
end







end

end end
endcase


always@(posedge clk)begin
case(lift_num-1)	//记录当前楼层的数码管显

示电路


0:dout=11'b0100_1111110;





















end

1:dout=11'b0100_0110000;

2:dout=11'b0100_1101101;

3:dout=11'b0100_1111001;

4:dout=11'b0100_0110011;

5:dout=11'b0100_1011011;

6:dout=11'b0100_1011111;

7:dout=11'b0100_1110000;

8:dout=11'b0100_1111111;

9:dout=11'b0100_1111011;

default:dout=11'b0100_1111110; endcase


always@(posedge clk)begin	//记录启停时间的时钟的
数码管显示电路
case(clk_num) 0:dout1=11'b0100_1111110;
1:dout1=11'b0100_0110000;

2:dout1=11'b0100_1101101;

3:dout1=11'b0100_1111001;

4:dout1=11'b0100_0110011;

5:dout1=11'b0100_1011011;

6:dout1=11'b0100_1011111;

7:dout1=11'b0100_1110000;

8:dout1=11'b0100_1111111;

9:dout1=11'b0100_1111011;

default:dout1=11'b0100_1111110;

endcase end
assign nfloor=btn_pre_re; assign seg=dout;
assign seg1=dout1; endmodule